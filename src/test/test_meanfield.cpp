#include "../meanfield.h"
#include <utility>
#include <map>
#include "testutils.h"

void test_BCC_He_gamma_minimal_basis_aims()
{
    // 
    MeanField mf(1, 1, 8, 8);
    mf.get_efermi() = 0.240386888648512;
    mf.get_weight()[0].zero_out();
    mf.get_weight()[0](0, 0) = mf.get_weight()[0](0, 1) = 2.0;
    vector<double> eig {
         -0.649240864,
         -0.577333356,
          0.783349882,
          0.783349885,
          0.783349885,
          1.130014638,
          1.130014642,
          1.130014642,
    };
    vector<complex<double>> wkc_gamma_T 
    {
       0.635395184437372, 0.747426907197624, -0.000000000000000, 0.000000000000000, 0.000000000000000, -0.000000000000000, 0.000000000000000, -0.000000000000000,
       0.000000000000000, 0.000000000000000, 0.000000046406191, -0.379780880349053, -0.566034156121301, -0.000000021962747, -0.074956542623863, 0.783355936987987,
       0.000000000000000, -0.000000000000000, 0.000000013452817,  0.566034156121300, -0.379780880349051, -0.000000008499556,  0.783355936987989,  0.074956542623864,
       0.000000000000000,  0.000000000000000, -0.681636400858004, -0.000000014684412, -0.000000046031303, -0.786933928164525, -0.000000006368929, -0.000000022672482,
       0.635395184437320, -0.747426907197668, -0.000000000000000, -0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000000,  0.000000000000001,
-      0.000000000000000,  0.000000000000000, -0.000000046406191,  0.379780880349045,  0.566034156121291, -0.000000021962747, -0.074956542623865,  0.783355936987997,
-      0.000000000000000,  0.000000000000000, -0.000000013452817, -0.566034156121295,  0.379780880349048, -0.000000008499557,  0.783355936987995,  0.074956542623863,
       0.000000000000000, -0.000000000000000,  0.681636400857993,  0.000000014684413,  0.000000046031304, -0.786933928164535, -0.000000006368930, -0.000000022672483,
    };
    for (int ib = 0; ib < 8; ib++)
        mf.get_eigenvals()[0](0, ib) = eig[ib];
    for (int iw = 0; iw < 8; iw++)
        for (int ib = 0; ib < 8; ib++)
            mf.get_eigenvectors()[0][0](ib, iw) = wkc_gamma_T[iw*8+ib];

    // test density matrix
    const auto dmat_gamma = mf.get_dmat_cplx(0, 0);
    const complex<double> thres = 1e-10;
    assert(fequal(dmat_gamma(0, 0), { 1.924748044018415e+00, 0}, thres));
    assert(fequal(dmat_gamma(4, 0), {-3.098398823937398e-01, 0}, thres));
    assert(fequal(dmat_gamma(0, 4), {-3.098398823937398e-01, 0}, thres));
    assert(fequal(dmat_gamma(4, 4), { 1.924748044018417e+00, 0}, thres));
}

int main (int argc, char *argv[])
{
    test_BCC_He_gamma_minimal_basis_aims();
    return 0;
}
